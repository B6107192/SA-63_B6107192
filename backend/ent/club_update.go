// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/pattapong1/app/ent/activity"
	"github.com/pattapong1/app/ent/club"
	"github.com/pattapong1/app/ent/clubtypes"
	"github.com/pattapong1/app/ent/location"
	"github.com/pattapong1/app/ent/predicate"
	"github.com/pattapong1/app/ent/user"
)

// ClubUpdate is the builder for updating Club entities.
type ClubUpdate struct {
	config
	hooks      []Hook
	mutation   *ClubMutation
	predicates []predicate.Club
}

// Where adds a new predicate for the builder.
func (cu *ClubUpdate) Where(ps ...predicate.Club) *ClubUpdate {
	cu.predicates = append(cu.predicates, ps...)
	return cu
}

// SetCLUBNAME sets the CLUB_NAME field.
func (cu *ClubUpdate) SetCLUBNAME(s string) *ClubUpdate {
	cu.mutation.SetCLUBNAME(s)
	return cu
}

// SetLocationID sets the location edge to Location by id.
func (cu *ClubUpdate) SetLocationID(id int) *ClubUpdate {
	cu.mutation.SetLocationID(id)
	return cu
}

// SetNillableLocationID sets the location edge to Location by id if the given value is not nil.
func (cu *ClubUpdate) SetNillableLocationID(id *int) *ClubUpdate {
	if id != nil {
		cu = cu.SetLocationID(*id)
	}
	return cu
}

// SetLocation sets the location edge to Location.
func (cu *ClubUpdate) SetLocation(l *Location) *ClubUpdate {
	return cu.SetLocationID(l.ID)
}

// SetClubtypesID sets the clubtypes edge to ClubTypes by id.
func (cu *ClubUpdate) SetClubtypesID(id int) *ClubUpdate {
	cu.mutation.SetClubtypesID(id)
	return cu
}

// SetNillableClubtypesID sets the clubtypes edge to ClubTypes by id if the given value is not nil.
func (cu *ClubUpdate) SetNillableClubtypesID(id *int) *ClubUpdate {
	if id != nil {
		cu = cu.SetClubtypesID(*id)
	}
	return cu
}

// SetClubtypes sets the clubtypes edge to ClubTypes.
func (cu *ClubUpdate) SetClubtypes(c *ClubTypes) *ClubUpdate {
	return cu.SetClubtypesID(c.ID)
}

// SetUserID sets the user edge to User by id.
func (cu *ClubUpdate) SetUserID(id int) *ClubUpdate {
	cu.mutation.SetUserID(id)
	return cu
}

// SetNillableUserID sets the user edge to User by id if the given value is not nil.
func (cu *ClubUpdate) SetNillableUserID(id *int) *ClubUpdate {
	if id != nil {
		cu = cu.SetUserID(*id)
	}
	return cu
}

// SetUser sets the user edge to User.
func (cu *ClubUpdate) SetUser(u *User) *ClubUpdate {
	return cu.SetUserID(u.ID)
}

// SetActivityID sets the activity edge to Activity by id.
func (cu *ClubUpdate) SetActivityID(id int) *ClubUpdate {
	cu.mutation.SetActivityID(id)
	return cu
}

// SetNillableActivityID sets the activity edge to Activity by id if the given value is not nil.
func (cu *ClubUpdate) SetNillableActivityID(id *int) *ClubUpdate {
	if id != nil {
		cu = cu.SetActivityID(*id)
	}
	return cu
}

// SetActivity sets the activity edge to Activity.
func (cu *ClubUpdate) SetActivity(a *Activity) *ClubUpdate {
	return cu.SetActivityID(a.ID)
}

// Mutation returns the ClubMutation object of the builder.
func (cu *ClubUpdate) Mutation() *ClubMutation {
	return cu.mutation
}

// ClearLocation clears the location edge to Location.
func (cu *ClubUpdate) ClearLocation() *ClubUpdate {
	cu.mutation.ClearLocation()
	return cu
}

// ClearClubtypes clears the clubtypes edge to ClubTypes.
func (cu *ClubUpdate) ClearClubtypes() *ClubUpdate {
	cu.mutation.ClearClubtypes()
	return cu
}

// ClearUser clears the user edge to User.
func (cu *ClubUpdate) ClearUser() *ClubUpdate {
	cu.mutation.ClearUser()
	return cu
}

// ClearActivity clears the activity edge to Activity.
func (cu *ClubUpdate) ClearActivity() *ClubUpdate {
	cu.mutation.ClearActivity()
	return cu
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (cu *ClubUpdate) Save(ctx context.Context) (int, error) {
	if v, ok := cu.mutation.CLUBNAME(); ok {
		if err := club.CLUBNAMEValidator(v); err != nil {
			return 0, &ValidationError{Name: "CLUB_NAME", err: fmt.Errorf("ent: validator failed for field \"CLUB_NAME\": %w", err)}
		}
	}

	var (
		err      error
		affected int
	)
	if len(cu.hooks) == 0 {
		affected, err = cu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ClubMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cu.mutation = mutation
			affected, err = cu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(cu.hooks) - 1; i >= 0; i-- {
			mut = cu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (cu *ClubUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *ClubUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *ClubUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cu *ClubUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   club.Table,
			Columns: club.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: club.FieldID,
			},
		},
	}
	if ps := cu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.CLUBNAME(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: club.FieldCLUBNAME,
		})
	}
	if cu.mutation.LocationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   club.LocationTable,
			Columns: []string{club.LocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: location.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.LocationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   club.LocationTable,
			Columns: []string{club.LocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: location.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.ClubtypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   club.ClubtypesTable,
			Columns: []string{club.ClubtypesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: clubtypes.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.ClubtypesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   club.ClubtypesTable,
			Columns: []string{club.ClubtypesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: clubtypes.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   club.UserTable,
			Columns: []string{club.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   club.UserTable,
			Columns: []string{club.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.ActivityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   club.ActivityTable,
			Columns: []string{club.ActivityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: activity.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.ActivityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   club.ActivityTable,
			Columns: []string{club.ActivityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: activity.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{club.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// ClubUpdateOne is the builder for updating a single Club entity.
type ClubUpdateOne struct {
	config
	hooks    []Hook
	mutation *ClubMutation
}

// SetCLUBNAME sets the CLUB_NAME field.
func (cuo *ClubUpdateOne) SetCLUBNAME(s string) *ClubUpdateOne {
	cuo.mutation.SetCLUBNAME(s)
	return cuo
}

// SetLocationID sets the location edge to Location by id.
func (cuo *ClubUpdateOne) SetLocationID(id int) *ClubUpdateOne {
	cuo.mutation.SetLocationID(id)
	return cuo
}

// SetNillableLocationID sets the location edge to Location by id if the given value is not nil.
func (cuo *ClubUpdateOne) SetNillableLocationID(id *int) *ClubUpdateOne {
	if id != nil {
		cuo = cuo.SetLocationID(*id)
	}
	return cuo
}

// SetLocation sets the location edge to Location.
func (cuo *ClubUpdateOne) SetLocation(l *Location) *ClubUpdateOne {
	return cuo.SetLocationID(l.ID)
}

// SetClubtypesID sets the clubtypes edge to ClubTypes by id.
func (cuo *ClubUpdateOne) SetClubtypesID(id int) *ClubUpdateOne {
	cuo.mutation.SetClubtypesID(id)
	return cuo
}

// SetNillableClubtypesID sets the clubtypes edge to ClubTypes by id if the given value is not nil.
func (cuo *ClubUpdateOne) SetNillableClubtypesID(id *int) *ClubUpdateOne {
	if id != nil {
		cuo = cuo.SetClubtypesID(*id)
	}
	return cuo
}

// SetClubtypes sets the clubtypes edge to ClubTypes.
func (cuo *ClubUpdateOne) SetClubtypes(c *ClubTypes) *ClubUpdateOne {
	return cuo.SetClubtypesID(c.ID)
}

// SetUserID sets the user edge to User by id.
func (cuo *ClubUpdateOne) SetUserID(id int) *ClubUpdateOne {
	cuo.mutation.SetUserID(id)
	return cuo
}

// SetNillableUserID sets the user edge to User by id if the given value is not nil.
func (cuo *ClubUpdateOne) SetNillableUserID(id *int) *ClubUpdateOne {
	if id != nil {
		cuo = cuo.SetUserID(*id)
	}
	return cuo
}

// SetUser sets the user edge to User.
func (cuo *ClubUpdateOne) SetUser(u *User) *ClubUpdateOne {
	return cuo.SetUserID(u.ID)
}

// SetActivityID sets the activity edge to Activity by id.
func (cuo *ClubUpdateOne) SetActivityID(id int) *ClubUpdateOne {
	cuo.mutation.SetActivityID(id)
	return cuo
}

// SetNillableActivityID sets the activity edge to Activity by id if the given value is not nil.
func (cuo *ClubUpdateOne) SetNillableActivityID(id *int) *ClubUpdateOne {
	if id != nil {
		cuo = cuo.SetActivityID(*id)
	}
	return cuo
}

// SetActivity sets the activity edge to Activity.
func (cuo *ClubUpdateOne) SetActivity(a *Activity) *ClubUpdateOne {
	return cuo.SetActivityID(a.ID)
}

// Mutation returns the ClubMutation object of the builder.
func (cuo *ClubUpdateOne) Mutation() *ClubMutation {
	return cuo.mutation
}

// ClearLocation clears the location edge to Location.
func (cuo *ClubUpdateOne) ClearLocation() *ClubUpdateOne {
	cuo.mutation.ClearLocation()
	return cuo
}

// ClearClubtypes clears the clubtypes edge to ClubTypes.
func (cuo *ClubUpdateOne) ClearClubtypes() *ClubUpdateOne {
	cuo.mutation.ClearClubtypes()
	return cuo
}

// ClearUser clears the user edge to User.
func (cuo *ClubUpdateOne) ClearUser() *ClubUpdateOne {
	cuo.mutation.ClearUser()
	return cuo
}

// ClearActivity clears the activity edge to Activity.
func (cuo *ClubUpdateOne) ClearActivity() *ClubUpdateOne {
	cuo.mutation.ClearActivity()
	return cuo
}

// Save executes the query and returns the updated entity.
func (cuo *ClubUpdateOne) Save(ctx context.Context) (*Club, error) {
	if v, ok := cuo.mutation.CLUBNAME(); ok {
		if err := club.CLUBNAMEValidator(v); err != nil {
			return nil, &ValidationError{Name: "CLUB_NAME", err: fmt.Errorf("ent: validator failed for field \"CLUB_NAME\": %w", err)}
		}
	}

	var (
		err  error
		node *Club
	)
	if len(cuo.hooks) == 0 {
		node, err = cuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ClubMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cuo.mutation = mutation
			node, err = cuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cuo.hooks) - 1; i >= 0; i-- {
			mut = cuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *ClubUpdateOne) SaveX(ctx context.Context) *Club {
	c, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return c
}

// Exec executes the query on the entity.
func (cuo *ClubUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *ClubUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cuo *ClubUpdateOne) sqlSave(ctx context.Context) (c *Club, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   club.Table,
			Columns: club.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: club.FieldID,
			},
		},
	}
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Club.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := cuo.mutation.CLUBNAME(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: club.FieldCLUBNAME,
		})
	}
	if cuo.mutation.LocationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   club.LocationTable,
			Columns: []string{club.LocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: location.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.LocationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   club.LocationTable,
			Columns: []string{club.LocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: location.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.ClubtypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   club.ClubtypesTable,
			Columns: []string{club.ClubtypesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: clubtypes.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.ClubtypesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   club.ClubtypesTable,
			Columns: []string{club.ClubtypesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: clubtypes.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   club.UserTable,
			Columns: []string{club.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   club.UserTable,
			Columns: []string{club.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.ActivityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   club.ActivityTable,
			Columns: []string{club.ActivityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: activity.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.ActivityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   club.ActivityTable,
			Columns: []string{club.ActivityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: activity.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	c = &Club{config: cuo.config}
	_spec.Assign = c.assignValues
	_spec.ScanValues = c.scanValues()
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{club.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return c, nil
}
