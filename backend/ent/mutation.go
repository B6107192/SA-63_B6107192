// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"sync"

	"github.com/pattapong1/app/ent/activity"
	"github.com/pattapong1/app/ent/club"
	"github.com/pattapong1/app/ent/clubtypes"
	"github.com/pattapong1/app/ent/location"
	"github.com/pattapong1/app/ent/user"

	"github.com/facebookincubator/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeActivity  = "Activity"
	TypeClub      = "Club"
	TypeClubTypes = "ClubTypes"
	TypeLocation  = "Location"
	TypeUser      = "User"
)

// ActivityMutation represents an operation that mutate the Activities
// nodes in the graph.
type ActivityMutation struct {
	config
	op                   Op
	typ                  string
	id                   *int
	_CLUBE_ACTIVITY_NAME *string
	clearedFields        map[string]struct{}
	club                 map[int]struct{}
	removedclub          map[int]struct{}
	done                 bool
	oldValue             func(context.Context) (*Activity, error)
}

var _ ent.Mutation = (*ActivityMutation)(nil)

// activityOption allows to manage the mutation configuration using functional options.
type activityOption func(*ActivityMutation)

// newActivityMutation creates new mutation for $n.Name.
func newActivityMutation(c config, op Op, opts ...activityOption) *ActivityMutation {
	m := &ActivityMutation{
		config:        c,
		op:            op,
		typ:           TypeActivity,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withActivityID sets the id field of the mutation.
func withActivityID(id int) activityOption {
	return func(m *ActivityMutation) {
		var (
			err   error
			once  sync.Once
			value *Activity
		)
		m.oldValue = func(ctx context.Context) (*Activity, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Activity.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withActivity sets the old Activity of the mutation.
func withActivity(node *Activity) activityOption {
	return func(m *ActivityMutation) {
		m.oldValue = func(context.Context) (*Activity, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ActivityMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ActivityMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *ActivityMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetCLUBEACTIVITYNAME sets the CLUBE_ACTIVITY_NAME field.
func (m *ActivityMutation) SetCLUBEACTIVITYNAME(s string) {
	m._CLUBE_ACTIVITY_NAME = &s
}

// CLUBEACTIVITYNAME returns the CLUBE_ACTIVITY_NAME value in the mutation.
func (m *ActivityMutation) CLUBEACTIVITYNAME() (r string, exists bool) {
	v := m._CLUBE_ACTIVITY_NAME
	if v == nil {
		return
	}
	return *v, true
}

// OldCLUBEACTIVITYNAME returns the old CLUBE_ACTIVITY_NAME value of the Activity.
// If the Activity object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *ActivityMutation) OldCLUBEACTIVITYNAME(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCLUBEACTIVITYNAME is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCLUBEACTIVITYNAME requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCLUBEACTIVITYNAME: %w", err)
	}
	return oldValue.CLUBEACTIVITYNAME, nil
}

// ResetCLUBEACTIVITYNAME reset all changes of the "CLUBE_ACTIVITY_NAME" field.
func (m *ActivityMutation) ResetCLUBEACTIVITYNAME() {
	m._CLUBE_ACTIVITY_NAME = nil
}

// AddClubIDs adds the club edge to Club by ids.
func (m *ActivityMutation) AddClubIDs(ids ...int) {
	if m.club == nil {
		m.club = make(map[int]struct{})
	}
	for i := range ids {
		m.club[ids[i]] = struct{}{}
	}
}

// RemoveClubIDs removes the club edge to Club by ids.
func (m *ActivityMutation) RemoveClubIDs(ids ...int) {
	if m.removedclub == nil {
		m.removedclub = make(map[int]struct{})
	}
	for i := range ids {
		m.removedclub[ids[i]] = struct{}{}
	}
}

// RemovedClub returns the removed ids of club.
func (m *ActivityMutation) RemovedClubIDs() (ids []int) {
	for id := range m.removedclub {
		ids = append(ids, id)
	}
	return
}

// ClubIDs returns the club ids in the mutation.
func (m *ActivityMutation) ClubIDs() (ids []int) {
	for id := range m.club {
		ids = append(ids, id)
	}
	return
}

// ResetClub reset all changes of the "club" edge.
func (m *ActivityMutation) ResetClub() {
	m.club = nil
	m.removedclub = nil
}

// Op returns the operation name.
func (m *ActivityMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Activity).
func (m *ActivityMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *ActivityMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m._CLUBE_ACTIVITY_NAME != nil {
		fields = append(fields, activity.FieldCLUBEACTIVITYNAME)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *ActivityMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case activity.FieldCLUBEACTIVITYNAME:
		return m.CLUBEACTIVITYNAME()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *ActivityMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case activity.FieldCLUBEACTIVITYNAME:
		return m.OldCLUBEACTIVITYNAME(ctx)
	}
	return nil, fmt.Errorf("unknown Activity field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *ActivityMutation) SetField(name string, value ent.Value) error {
	switch name {
	case activity.FieldCLUBEACTIVITYNAME:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCLUBEACTIVITYNAME(v)
		return nil
	}
	return fmt.Errorf("unknown Activity field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *ActivityMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *ActivityMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *ActivityMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Activity numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *ActivityMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *ActivityMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *ActivityMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Activity nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *ActivityMutation) ResetField(name string) error {
	switch name {
	case activity.FieldCLUBEACTIVITYNAME:
		m.ResetCLUBEACTIVITYNAME()
		return nil
	}
	return fmt.Errorf("unknown Activity field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *ActivityMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.club != nil {
		edges = append(edges, activity.EdgeClub)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *ActivityMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case activity.EdgeClub:
		ids := make([]ent.Value, 0, len(m.club))
		for id := range m.club {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *ActivityMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedclub != nil {
		edges = append(edges, activity.EdgeClub)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *ActivityMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case activity.EdgeClub:
		ids := make([]ent.Value, 0, len(m.removedclub))
		for id := range m.removedclub {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *ActivityMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *ActivityMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *ActivityMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Activity unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *ActivityMutation) ResetEdge(name string) error {
	switch name {
	case activity.EdgeClub:
		m.ResetClub()
		return nil
	}
	return fmt.Errorf("unknown Activity edge %s", name)
}

// ClubMutation represents an operation that mutate the Clubs
// nodes in the graph.
type ClubMutation struct {
	config
	op               Op
	typ              string
	id               *int
	_CLUB_NAME       *string
	clearedFields    map[string]struct{}
	location         *int
	clearedlocation  bool
	clubtypes        *int
	clearedclubtypes bool
	user             *int
	cleareduser      bool
	activity         *int
	clearedactivity  bool
	done             bool
	oldValue         func(context.Context) (*Club, error)
}

var _ ent.Mutation = (*ClubMutation)(nil)

// clubOption allows to manage the mutation configuration using functional options.
type clubOption func(*ClubMutation)

// newClubMutation creates new mutation for $n.Name.
func newClubMutation(c config, op Op, opts ...clubOption) *ClubMutation {
	m := &ClubMutation{
		config:        c,
		op:            op,
		typ:           TypeClub,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withClubID sets the id field of the mutation.
func withClubID(id int) clubOption {
	return func(m *ClubMutation) {
		var (
			err   error
			once  sync.Once
			value *Club
		)
		m.oldValue = func(ctx context.Context) (*Club, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Club.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withClub sets the old Club of the mutation.
func withClub(node *Club) clubOption {
	return func(m *ClubMutation) {
		m.oldValue = func(context.Context) (*Club, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ClubMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ClubMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *ClubMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetCLUBNAME sets the CLUB_NAME field.
func (m *ClubMutation) SetCLUBNAME(s string) {
	m._CLUB_NAME = &s
}

// CLUBNAME returns the CLUB_NAME value in the mutation.
func (m *ClubMutation) CLUBNAME() (r string, exists bool) {
	v := m._CLUB_NAME
	if v == nil {
		return
	}
	return *v, true
}

// OldCLUBNAME returns the old CLUB_NAME value of the Club.
// If the Club object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *ClubMutation) OldCLUBNAME(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCLUBNAME is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCLUBNAME requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCLUBNAME: %w", err)
	}
	return oldValue.CLUBNAME, nil
}

// ResetCLUBNAME reset all changes of the "CLUB_NAME" field.
func (m *ClubMutation) ResetCLUBNAME() {
	m._CLUB_NAME = nil
}

// SetLocationID sets the location edge to Location by id.
func (m *ClubMutation) SetLocationID(id int) {
	m.location = &id
}

// ClearLocation clears the location edge to Location.
func (m *ClubMutation) ClearLocation() {
	m.clearedlocation = true
}

// LocationCleared returns if the edge location was cleared.
func (m *ClubMutation) LocationCleared() bool {
	return m.clearedlocation
}

// LocationID returns the location id in the mutation.
func (m *ClubMutation) LocationID() (id int, exists bool) {
	if m.location != nil {
		return *m.location, true
	}
	return
}

// LocationIDs returns the location ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// LocationID instead. It exists only for internal usage by the builders.
func (m *ClubMutation) LocationIDs() (ids []int) {
	if id := m.location; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetLocation reset all changes of the "location" edge.
func (m *ClubMutation) ResetLocation() {
	m.location = nil
	m.clearedlocation = false
}

// SetClubtypesID sets the clubtypes edge to ClubTypes by id.
func (m *ClubMutation) SetClubtypesID(id int) {
	m.clubtypes = &id
}

// ClearClubtypes clears the clubtypes edge to ClubTypes.
func (m *ClubMutation) ClearClubtypes() {
	m.clearedclubtypes = true
}

// ClubtypesCleared returns if the edge clubtypes was cleared.
func (m *ClubMutation) ClubtypesCleared() bool {
	return m.clearedclubtypes
}

// ClubtypesID returns the clubtypes id in the mutation.
func (m *ClubMutation) ClubtypesID() (id int, exists bool) {
	if m.clubtypes != nil {
		return *m.clubtypes, true
	}
	return
}

// ClubtypesIDs returns the clubtypes ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// ClubtypesID instead. It exists only for internal usage by the builders.
func (m *ClubMutation) ClubtypesIDs() (ids []int) {
	if id := m.clubtypes; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetClubtypes reset all changes of the "clubtypes" edge.
func (m *ClubMutation) ResetClubtypes() {
	m.clubtypes = nil
	m.clearedclubtypes = false
}

// SetUserID sets the user edge to User by id.
func (m *ClubMutation) SetUserID(id int) {
	m.user = &id
}

// ClearUser clears the user edge to User.
func (m *ClubMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared returns if the edge user was cleared.
func (m *ClubMutation) UserCleared() bool {
	return m.cleareduser
}

// UserID returns the user id in the mutation.
func (m *ClubMutation) UserID() (id int, exists bool) {
	if m.user != nil {
		return *m.user, true
	}
	return
}

// UserIDs returns the user ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *ClubMutation) UserIDs() (ids []int) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser reset all changes of the "user" edge.
func (m *ClubMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// SetActivityID sets the activity edge to Activity by id.
func (m *ClubMutation) SetActivityID(id int) {
	m.activity = &id
}

// ClearActivity clears the activity edge to Activity.
func (m *ClubMutation) ClearActivity() {
	m.clearedactivity = true
}

// ActivityCleared returns if the edge activity was cleared.
func (m *ClubMutation) ActivityCleared() bool {
	return m.clearedactivity
}

// ActivityID returns the activity id in the mutation.
func (m *ClubMutation) ActivityID() (id int, exists bool) {
	if m.activity != nil {
		return *m.activity, true
	}
	return
}

// ActivityIDs returns the activity ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// ActivityID instead. It exists only for internal usage by the builders.
func (m *ClubMutation) ActivityIDs() (ids []int) {
	if id := m.activity; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetActivity reset all changes of the "activity" edge.
func (m *ClubMutation) ResetActivity() {
	m.activity = nil
	m.clearedactivity = false
}

// Op returns the operation name.
func (m *ClubMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Club).
func (m *ClubMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *ClubMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m._CLUB_NAME != nil {
		fields = append(fields, club.FieldCLUBNAME)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *ClubMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case club.FieldCLUBNAME:
		return m.CLUBNAME()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *ClubMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case club.FieldCLUBNAME:
		return m.OldCLUBNAME(ctx)
	}
	return nil, fmt.Errorf("unknown Club field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *ClubMutation) SetField(name string, value ent.Value) error {
	switch name {
	case club.FieldCLUBNAME:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCLUBNAME(v)
		return nil
	}
	return fmt.Errorf("unknown Club field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *ClubMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *ClubMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *ClubMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Club numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *ClubMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *ClubMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *ClubMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Club nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *ClubMutation) ResetField(name string) error {
	switch name {
	case club.FieldCLUBNAME:
		m.ResetCLUBNAME()
		return nil
	}
	return fmt.Errorf("unknown Club field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *ClubMutation) AddedEdges() []string {
	edges := make([]string, 0, 4)
	if m.location != nil {
		edges = append(edges, club.EdgeLocation)
	}
	if m.clubtypes != nil {
		edges = append(edges, club.EdgeClubtypes)
	}
	if m.user != nil {
		edges = append(edges, club.EdgeUser)
	}
	if m.activity != nil {
		edges = append(edges, club.EdgeActivity)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *ClubMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case club.EdgeLocation:
		if id := m.location; id != nil {
			return []ent.Value{*id}
		}
	case club.EdgeClubtypes:
		if id := m.clubtypes; id != nil {
			return []ent.Value{*id}
		}
	case club.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	case club.EdgeActivity:
		if id := m.activity; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *ClubMutation) RemovedEdges() []string {
	edges := make([]string, 0, 4)
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *ClubMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *ClubMutation) ClearedEdges() []string {
	edges := make([]string, 0, 4)
	if m.clearedlocation {
		edges = append(edges, club.EdgeLocation)
	}
	if m.clearedclubtypes {
		edges = append(edges, club.EdgeClubtypes)
	}
	if m.cleareduser {
		edges = append(edges, club.EdgeUser)
	}
	if m.clearedactivity {
		edges = append(edges, club.EdgeActivity)
	}
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *ClubMutation) EdgeCleared(name string) bool {
	switch name {
	case club.EdgeLocation:
		return m.clearedlocation
	case club.EdgeClubtypes:
		return m.clearedclubtypes
	case club.EdgeUser:
		return m.cleareduser
	case club.EdgeActivity:
		return m.clearedactivity
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *ClubMutation) ClearEdge(name string) error {
	switch name {
	case club.EdgeLocation:
		m.ClearLocation()
		return nil
	case club.EdgeClubtypes:
		m.ClearClubtypes()
		return nil
	case club.EdgeUser:
		m.ClearUser()
		return nil
	case club.EdgeActivity:
		m.ClearActivity()
		return nil
	}
	return fmt.Errorf("unknown Club unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *ClubMutation) ResetEdge(name string) error {
	switch name {
	case club.EdgeLocation:
		m.ResetLocation()
		return nil
	case club.EdgeClubtypes:
		m.ResetClubtypes()
		return nil
	case club.EdgeUser:
		m.ResetUser()
		return nil
	case club.EdgeActivity:
		m.ResetActivity()
		return nil
	}
	return fmt.Errorf("unknown Club edge %s", name)
}

// ClubTypesMutation represents an operation that mutate the ClubTypesSlice
// nodes in the graph.
type ClubTypesMutation struct {
	config
	op               Op
	typ              string
	id               *int
	_CLUBE_TYPE_NAME *string
	clearedFields    map[string]struct{}
	club             map[int]struct{}
	removedclub      map[int]struct{}
	done             bool
	oldValue         func(context.Context) (*ClubTypes, error)
}

var _ ent.Mutation = (*ClubTypesMutation)(nil)

// clubtypesOption allows to manage the mutation configuration using functional options.
type clubtypesOption func(*ClubTypesMutation)

// newClubTypesMutation creates new mutation for $n.Name.
func newClubTypesMutation(c config, op Op, opts ...clubtypesOption) *ClubTypesMutation {
	m := &ClubTypesMutation{
		config:        c,
		op:            op,
		typ:           TypeClubTypes,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withClubTypesID sets the id field of the mutation.
func withClubTypesID(id int) clubtypesOption {
	return func(m *ClubTypesMutation) {
		var (
			err   error
			once  sync.Once
			value *ClubTypes
		)
		m.oldValue = func(ctx context.Context) (*ClubTypes, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ClubTypes.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withClubTypes sets the old ClubTypes of the mutation.
func withClubTypes(node *ClubTypes) clubtypesOption {
	return func(m *ClubTypesMutation) {
		m.oldValue = func(context.Context) (*ClubTypes, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ClubTypesMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ClubTypesMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *ClubTypesMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetCLUBETYPENAME sets the CLUBE_TYPE_NAME field.
func (m *ClubTypesMutation) SetCLUBETYPENAME(s string) {
	m._CLUBE_TYPE_NAME = &s
}

// CLUBETYPENAME returns the CLUBE_TYPE_NAME value in the mutation.
func (m *ClubTypesMutation) CLUBETYPENAME() (r string, exists bool) {
	v := m._CLUBE_TYPE_NAME
	if v == nil {
		return
	}
	return *v, true
}

// OldCLUBETYPENAME returns the old CLUBE_TYPE_NAME value of the ClubTypes.
// If the ClubTypes object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *ClubTypesMutation) OldCLUBETYPENAME(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCLUBETYPENAME is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCLUBETYPENAME requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCLUBETYPENAME: %w", err)
	}
	return oldValue.CLUBETYPENAME, nil
}

// ResetCLUBETYPENAME reset all changes of the "CLUBE_TYPE_NAME" field.
func (m *ClubTypesMutation) ResetCLUBETYPENAME() {
	m._CLUBE_TYPE_NAME = nil
}

// AddClubIDs adds the club edge to Club by ids.
func (m *ClubTypesMutation) AddClubIDs(ids ...int) {
	if m.club == nil {
		m.club = make(map[int]struct{})
	}
	for i := range ids {
		m.club[ids[i]] = struct{}{}
	}
}

// RemoveClubIDs removes the club edge to Club by ids.
func (m *ClubTypesMutation) RemoveClubIDs(ids ...int) {
	if m.removedclub == nil {
		m.removedclub = make(map[int]struct{})
	}
	for i := range ids {
		m.removedclub[ids[i]] = struct{}{}
	}
}

// RemovedClub returns the removed ids of club.
func (m *ClubTypesMutation) RemovedClubIDs() (ids []int) {
	for id := range m.removedclub {
		ids = append(ids, id)
	}
	return
}

// ClubIDs returns the club ids in the mutation.
func (m *ClubTypesMutation) ClubIDs() (ids []int) {
	for id := range m.club {
		ids = append(ids, id)
	}
	return
}

// ResetClub reset all changes of the "club" edge.
func (m *ClubTypesMutation) ResetClub() {
	m.club = nil
	m.removedclub = nil
}

// Op returns the operation name.
func (m *ClubTypesMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (ClubTypes).
func (m *ClubTypesMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *ClubTypesMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m._CLUBE_TYPE_NAME != nil {
		fields = append(fields, clubtypes.FieldCLUBETYPENAME)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *ClubTypesMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case clubtypes.FieldCLUBETYPENAME:
		return m.CLUBETYPENAME()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *ClubTypesMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case clubtypes.FieldCLUBETYPENAME:
		return m.OldCLUBETYPENAME(ctx)
	}
	return nil, fmt.Errorf("unknown ClubTypes field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *ClubTypesMutation) SetField(name string, value ent.Value) error {
	switch name {
	case clubtypes.FieldCLUBETYPENAME:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCLUBETYPENAME(v)
		return nil
	}
	return fmt.Errorf("unknown ClubTypes field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *ClubTypesMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *ClubTypesMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *ClubTypesMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown ClubTypes numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *ClubTypesMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *ClubTypesMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *ClubTypesMutation) ClearField(name string) error {
	return fmt.Errorf("unknown ClubTypes nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *ClubTypesMutation) ResetField(name string) error {
	switch name {
	case clubtypes.FieldCLUBETYPENAME:
		m.ResetCLUBETYPENAME()
		return nil
	}
	return fmt.Errorf("unknown ClubTypes field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *ClubTypesMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.club != nil {
		edges = append(edges, clubtypes.EdgeClub)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *ClubTypesMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case clubtypes.EdgeClub:
		ids := make([]ent.Value, 0, len(m.club))
		for id := range m.club {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *ClubTypesMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedclub != nil {
		edges = append(edges, clubtypes.EdgeClub)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *ClubTypesMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case clubtypes.EdgeClub:
		ids := make([]ent.Value, 0, len(m.removedclub))
		for id := range m.removedclub {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *ClubTypesMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *ClubTypesMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *ClubTypesMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown ClubTypes unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *ClubTypesMutation) ResetEdge(name string) error {
	switch name {
	case clubtypes.EdgeClub:
		m.ResetClub()
		return nil
	}
	return fmt.Errorf("unknown ClubTypes edge %s", name)
}

// LocationMutation represents an operation that mutate the Locations
// nodes in the graph.
type LocationMutation struct {
	config
	op                      Op
	typ                     string
	id                      *int
	_CLUBE_LOCATION_NAME    *string
	_CLUBE_LOCATION_ADDRESS *string
	clearedFields           map[string]struct{}
	club                    map[int]struct{}
	removedclub             map[int]struct{}
	done                    bool
	oldValue                func(context.Context) (*Location, error)
}

var _ ent.Mutation = (*LocationMutation)(nil)

// locationOption allows to manage the mutation configuration using functional options.
type locationOption func(*LocationMutation)

// newLocationMutation creates new mutation for $n.Name.
func newLocationMutation(c config, op Op, opts ...locationOption) *LocationMutation {
	m := &LocationMutation{
		config:        c,
		op:            op,
		typ:           TypeLocation,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withLocationID sets the id field of the mutation.
func withLocationID(id int) locationOption {
	return func(m *LocationMutation) {
		var (
			err   error
			once  sync.Once
			value *Location
		)
		m.oldValue = func(ctx context.Context) (*Location, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Location.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withLocation sets the old Location of the mutation.
func withLocation(node *Location) locationOption {
	return func(m *LocationMutation) {
		m.oldValue = func(context.Context) (*Location, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m LocationMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m LocationMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *LocationMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetCLUBELOCATIONNAME sets the CLUBE_LOCATION_NAME field.
func (m *LocationMutation) SetCLUBELOCATIONNAME(s string) {
	m._CLUBE_LOCATION_NAME = &s
}

// CLUBELOCATIONNAME returns the CLUBE_LOCATION_NAME value in the mutation.
func (m *LocationMutation) CLUBELOCATIONNAME() (r string, exists bool) {
	v := m._CLUBE_LOCATION_NAME
	if v == nil {
		return
	}
	return *v, true
}

// OldCLUBELOCATIONNAME returns the old CLUBE_LOCATION_NAME value of the Location.
// If the Location object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *LocationMutation) OldCLUBELOCATIONNAME(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCLUBELOCATIONNAME is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCLUBELOCATIONNAME requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCLUBELOCATIONNAME: %w", err)
	}
	return oldValue.CLUBELOCATIONNAME, nil
}

// ResetCLUBELOCATIONNAME reset all changes of the "CLUBE_LOCATION_NAME" field.
func (m *LocationMutation) ResetCLUBELOCATIONNAME() {
	m._CLUBE_LOCATION_NAME = nil
}

// SetCLUBELOCATIONADDRESS sets the CLUBE_LOCATION_ADDRESS field.
func (m *LocationMutation) SetCLUBELOCATIONADDRESS(s string) {
	m._CLUBE_LOCATION_ADDRESS = &s
}

// CLUBELOCATIONADDRESS returns the CLUBE_LOCATION_ADDRESS value in the mutation.
func (m *LocationMutation) CLUBELOCATIONADDRESS() (r string, exists bool) {
	v := m._CLUBE_LOCATION_ADDRESS
	if v == nil {
		return
	}
	return *v, true
}

// OldCLUBELOCATIONADDRESS returns the old CLUBE_LOCATION_ADDRESS value of the Location.
// If the Location object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *LocationMutation) OldCLUBELOCATIONADDRESS(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCLUBELOCATIONADDRESS is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCLUBELOCATIONADDRESS requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCLUBELOCATIONADDRESS: %w", err)
	}
	return oldValue.CLUBELOCATIONADDRESS, nil
}

// ResetCLUBELOCATIONADDRESS reset all changes of the "CLUBE_LOCATION_ADDRESS" field.
func (m *LocationMutation) ResetCLUBELOCATIONADDRESS() {
	m._CLUBE_LOCATION_ADDRESS = nil
}

// AddClubIDs adds the club edge to Club by ids.
func (m *LocationMutation) AddClubIDs(ids ...int) {
	if m.club == nil {
		m.club = make(map[int]struct{})
	}
	for i := range ids {
		m.club[ids[i]] = struct{}{}
	}
}

// RemoveClubIDs removes the club edge to Club by ids.
func (m *LocationMutation) RemoveClubIDs(ids ...int) {
	if m.removedclub == nil {
		m.removedclub = make(map[int]struct{})
	}
	for i := range ids {
		m.removedclub[ids[i]] = struct{}{}
	}
}

// RemovedClub returns the removed ids of club.
func (m *LocationMutation) RemovedClubIDs() (ids []int) {
	for id := range m.removedclub {
		ids = append(ids, id)
	}
	return
}

// ClubIDs returns the club ids in the mutation.
func (m *LocationMutation) ClubIDs() (ids []int) {
	for id := range m.club {
		ids = append(ids, id)
	}
	return
}

// ResetClub reset all changes of the "club" edge.
func (m *LocationMutation) ResetClub() {
	m.club = nil
	m.removedclub = nil
}

// Op returns the operation name.
func (m *LocationMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Location).
func (m *LocationMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *LocationMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m._CLUBE_LOCATION_NAME != nil {
		fields = append(fields, location.FieldCLUBELOCATIONNAME)
	}
	if m._CLUBE_LOCATION_ADDRESS != nil {
		fields = append(fields, location.FieldCLUBELOCATIONADDRESS)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *LocationMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case location.FieldCLUBELOCATIONNAME:
		return m.CLUBELOCATIONNAME()
	case location.FieldCLUBELOCATIONADDRESS:
		return m.CLUBELOCATIONADDRESS()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *LocationMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case location.FieldCLUBELOCATIONNAME:
		return m.OldCLUBELOCATIONNAME(ctx)
	case location.FieldCLUBELOCATIONADDRESS:
		return m.OldCLUBELOCATIONADDRESS(ctx)
	}
	return nil, fmt.Errorf("unknown Location field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *LocationMutation) SetField(name string, value ent.Value) error {
	switch name {
	case location.FieldCLUBELOCATIONNAME:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCLUBELOCATIONNAME(v)
		return nil
	case location.FieldCLUBELOCATIONADDRESS:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCLUBELOCATIONADDRESS(v)
		return nil
	}
	return fmt.Errorf("unknown Location field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *LocationMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *LocationMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *LocationMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Location numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *LocationMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *LocationMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *LocationMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Location nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *LocationMutation) ResetField(name string) error {
	switch name {
	case location.FieldCLUBELOCATIONNAME:
		m.ResetCLUBELOCATIONNAME()
		return nil
	case location.FieldCLUBELOCATIONADDRESS:
		m.ResetCLUBELOCATIONADDRESS()
		return nil
	}
	return fmt.Errorf("unknown Location field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *LocationMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.club != nil {
		edges = append(edges, location.EdgeClub)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *LocationMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case location.EdgeClub:
		ids := make([]ent.Value, 0, len(m.club))
		for id := range m.club {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *LocationMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedclub != nil {
		edges = append(edges, location.EdgeClub)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *LocationMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case location.EdgeClub:
		ids := make([]ent.Value, 0, len(m.removedclub))
		for id := range m.removedclub {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *LocationMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *LocationMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *LocationMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Location unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *LocationMutation) ResetEdge(name string) error {
	switch name {
	case location.EdgeClub:
		m.ResetClub()
		return nil
	}
	return fmt.Errorf("unknown Location edge %s", name)
}

// UserMutation represents an operation that mutate the Users
// nodes in the graph.
type UserMutation struct {
	config
	op            Op
	typ           string
	id            *int
	_USER_NAME    *string
	_USER_EMAIL   *string
	clearedFields map[string]struct{}
	club          map[int]struct{}
	removedclub   map[int]struct{}
	done          bool
	oldValue      func(context.Context) (*User, error)
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows to manage the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for $n.Name.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the id field of the mutation.
func withUserID(id int) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *UserMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetUSERNAME sets the USER_NAME field.
func (m *UserMutation) SetUSERNAME(s string) {
	m._USER_NAME = &s
}

// USERNAME returns the USER_NAME value in the mutation.
func (m *UserMutation) USERNAME() (r string, exists bool) {
	v := m._USER_NAME
	if v == nil {
		return
	}
	return *v, true
}

// OldUSERNAME returns the old USER_NAME value of the User.
// If the User object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *UserMutation) OldUSERNAME(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUSERNAME is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUSERNAME requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUSERNAME: %w", err)
	}
	return oldValue.USERNAME, nil
}

// ResetUSERNAME reset all changes of the "USER_NAME" field.
func (m *UserMutation) ResetUSERNAME() {
	m._USER_NAME = nil
}

// SetUSEREMAIL sets the USER_EMAIL field.
func (m *UserMutation) SetUSEREMAIL(s string) {
	m._USER_EMAIL = &s
}

// USEREMAIL returns the USER_EMAIL value in the mutation.
func (m *UserMutation) USEREMAIL() (r string, exists bool) {
	v := m._USER_EMAIL
	if v == nil {
		return
	}
	return *v, true
}

// OldUSEREMAIL returns the old USER_EMAIL value of the User.
// If the User object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *UserMutation) OldUSEREMAIL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUSEREMAIL is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUSEREMAIL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUSEREMAIL: %w", err)
	}
	return oldValue.USEREMAIL, nil
}

// ResetUSEREMAIL reset all changes of the "USER_EMAIL" field.
func (m *UserMutation) ResetUSEREMAIL() {
	m._USER_EMAIL = nil
}

// AddClubIDs adds the club edge to Club by ids.
func (m *UserMutation) AddClubIDs(ids ...int) {
	if m.club == nil {
		m.club = make(map[int]struct{})
	}
	for i := range ids {
		m.club[ids[i]] = struct{}{}
	}
}

// RemoveClubIDs removes the club edge to Club by ids.
func (m *UserMutation) RemoveClubIDs(ids ...int) {
	if m.removedclub == nil {
		m.removedclub = make(map[int]struct{})
	}
	for i := range ids {
		m.removedclub[ids[i]] = struct{}{}
	}
}

// RemovedClub returns the removed ids of club.
func (m *UserMutation) RemovedClubIDs() (ids []int) {
	for id := range m.removedclub {
		ids = append(ids, id)
	}
	return
}

// ClubIDs returns the club ids in the mutation.
func (m *UserMutation) ClubIDs() (ids []int) {
	for id := range m.club {
		ids = append(ids, id)
	}
	return
}

// ResetClub reset all changes of the "club" edge.
func (m *UserMutation) ResetClub() {
	m.club = nil
	m.removedclub = nil
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m._USER_NAME != nil {
		fields = append(fields, user.FieldUSERNAME)
	}
	if m._USER_EMAIL != nil {
		fields = append(fields, user.FieldUSEREMAIL)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldUSERNAME:
		return m.USERNAME()
	case user.FieldUSEREMAIL:
		return m.USEREMAIL()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldUSERNAME:
		return m.OldUSERNAME(ctx)
	case user.FieldUSEREMAIL:
		return m.OldUSEREMAIL(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldUSERNAME:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUSERNAME(v)
		return nil
	case user.FieldUSEREMAIL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUSEREMAIL(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *UserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldUSERNAME:
		m.ResetUSERNAME()
		return nil
	case user.FieldUSEREMAIL:
		m.ResetUSEREMAIL()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.club != nil {
		edges = append(edges, user.EdgeClub)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeClub:
		ids := make([]ent.Value, 0, len(m.club))
		for id := range m.club {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedclub != nil {
		edges = append(edges, user.EdgeClub)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeClub:
		ids := make([]ent.Value, 0, len(m.removedclub))
		for id := range m.removedclub {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeClub:
		m.ResetClub()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}
