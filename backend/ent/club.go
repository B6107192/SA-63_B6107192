// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/pattapong1/app/ent/activity"
	"github.com/pattapong1/app/ent/club"
	"github.com/pattapong1/app/ent/clubtypes"
	"github.com/pattapong1/app/ent/location"
	"github.com/pattapong1/app/ent/user"
)

// Club is the model entity for the Club schema.
type Club struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CLUBNAME holds the value of the "CLUB_NAME" field.
	CLUBNAME string `json:"CLUB_NAME,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ClubQuery when eager-loading is set.
	Edges        ClubEdges `json:"edges"`
	activity_id  *int
	clubtypes_id *int
	location_id  *int
	user_id      *int
}

// ClubEdges holds the relations/edges for other nodes in the graph.
type ClubEdges struct {
	// Location holds the value of the location edge.
	Location *Location
	// Clubtypes holds the value of the clubtypes edge.
	Clubtypes *ClubTypes
	// User holds the value of the user edge.
	User *User
	// Activity holds the value of the activity edge.
	Activity *Activity
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// LocationOrErr returns the Location value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ClubEdges) LocationOrErr() (*Location, error) {
	if e.loadedTypes[0] {
		if e.Location == nil {
			// The edge location was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: location.Label}
		}
		return e.Location, nil
	}
	return nil, &NotLoadedError{edge: "location"}
}

// ClubtypesOrErr returns the Clubtypes value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ClubEdges) ClubtypesOrErr() (*ClubTypes, error) {
	if e.loadedTypes[1] {
		if e.Clubtypes == nil {
			// The edge clubtypes was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: clubtypes.Label}
		}
		return e.Clubtypes, nil
	}
	return nil, &NotLoadedError{edge: "clubtypes"}
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ClubEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[2] {
		if e.User == nil {
			// The edge user was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// ActivityOrErr returns the Activity value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ClubEdges) ActivityOrErr() (*Activity, error) {
	if e.loadedTypes[3] {
		if e.Activity == nil {
			// The edge activity was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: activity.Label}
		}
		return e.Activity, nil
	}
	return nil, &NotLoadedError{edge: "activity"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Club) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // CLUB_NAME
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*Club) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // activity_id
		&sql.NullInt64{}, // clubtypes_id
		&sql.NullInt64{}, // location_id
		&sql.NullInt64{}, // user_id
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Club fields.
func (c *Club) assignValues(values ...interface{}) error {
	if m, n := len(values), len(club.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	c.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field CLUB_NAME", values[0])
	} else if value.Valid {
		c.CLUBNAME = value.String
	}
	values = values[1:]
	if len(values) == len(club.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field activity_id", value)
		} else if value.Valid {
			c.activity_id = new(int)
			*c.activity_id = int(value.Int64)
		}
		if value, ok := values[1].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field clubtypes_id", value)
		} else if value.Valid {
			c.clubtypes_id = new(int)
			*c.clubtypes_id = int(value.Int64)
		}
		if value, ok := values[2].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field location_id", value)
		} else if value.Valid {
			c.location_id = new(int)
			*c.location_id = int(value.Int64)
		}
		if value, ok := values[3].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field user_id", value)
		} else if value.Valid {
			c.user_id = new(int)
			*c.user_id = int(value.Int64)
		}
	}
	return nil
}

// QueryLocation queries the location edge of the Club.
func (c *Club) QueryLocation() *LocationQuery {
	return (&ClubClient{config: c.config}).QueryLocation(c)
}

// QueryClubtypes queries the clubtypes edge of the Club.
func (c *Club) QueryClubtypes() *ClubTypesQuery {
	return (&ClubClient{config: c.config}).QueryClubtypes(c)
}

// QueryUser queries the user edge of the Club.
func (c *Club) QueryUser() *UserQuery {
	return (&ClubClient{config: c.config}).QueryUser(c)
}

// QueryActivity queries the activity edge of the Club.
func (c *Club) QueryActivity() *ActivityQuery {
	return (&ClubClient{config: c.config}).QueryActivity(c)
}

// Update returns a builder for updating this Club.
// Note that, you need to call Club.Unwrap() before calling this method, if this Club
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Club) Update() *ClubUpdateOne {
	return (&ClubClient{config: c.config}).UpdateOne(c)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (c *Club) Unwrap() *Club {
	tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Club is not a transactional entity")
	}
	c.config.driver = tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Club) String() string {
	var builder strings.Builder
	builder.WriteString("Club(")
	builder.WriteString(fmt.Sprintf("id=%v", c.ID))
	builder.WriteString(", CLUB_NAME=")
	builder.WriteString(c.CLUBNAME)
	builder.WriteByte(')')
	return builder.String()
}

// Clubs is a parsable slice of Club.
type Clubs []*Club

func (c Clubs) config(cfg config) {
	for _i := range c {
		c[_i].config = cfg
	}
}
