// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/pattapong1/app/ent/activity"
	"github.com/pattapong1/app/ent/club"
	"github.com/pattapong1/app/ent/clubtypes"
	"github.com/pattapong1/app/ent/location"
	"github.com/pattapong1/app/ent/user"
)

// ClubCreate is the builder for creating a Club entity.
type ClubCreate struct {
	config
	mutation *ClubMutation
	hooks    []Hook
}

// SetCLUBNAME sets the CLUB_NAME field.
func (cc *ClubCreate) SetCLUBNAME(s string) *ClubCreate {
	cc.mutation.SetCLUBNAME(s)
	return cc
}

// SetLocationID sets the location edge to Location by id.
func (cc *ClubCreate) SetLocationID(id int) *ClubCreate {
	cc.mutation.SetLocationID(id)
	return cc
}

// SetNillableLocationID sets the location edge to Location by id if the given value is not nil.
func (cc *ClubCreate) SetNillableLocationID(id *int) *ClubCreate {
	if id != nil {
		cc = cc.SetLocationID(*id)
	}
	return cc
}

// SetLocation sets the location edge to Location.
func (cc *ClubCreate) SetLocation(l *Location) *ClubCreate {
	return cc.SetLocationID(l.ID)
}

// SetClubtypesID sets the clubtypes edge to ClubTypes by id.
func (cc *ClubCreate) SetClubtypesID(id int) *ClubCreate {
	cc.mutation.SetClubtypesID(id)
	return cc
}

// SetNillableClubtypesID sets the clubtypes edge to ClubTypes by id if the given value is not nil.
func (cc *ClubCreate) SetNillableClubtypesID(id *int) *ClubCreate {
	if id != nil {
		cc = cc.SetClubtypesID(*id)
	}
	return cc
}

// SetClubtypes sets the clubtypes edge to ClubTypes.
func (cc *ClubCreate) SetClubtypes(c *ClubTypes) *ClubCreate {
	return cc.SetClubtypesID(c.ID)
}

// SetUserID sets the user edge to User by id.
func (cc *ClubCreate) SetUserID(id int) *ClubCreate {
	cc.mutation.SetUserID(id)
	return cc
}

// SetNillableUserID sets the user edge to User by id if the given value is not nil.
func (cc *ClubCreate) SetNillableUserID(id *int) *ClubCreate {
	if id != nil {
		cc = cc.SetUserID(*id)
	}
	return cc
}

// SetUser sets the user edge to User.
func (cc *ClubCreate) SetUser(u *User) *ClubCreate {
	return cc.SetUserID(u.ID)
}

// SetActivityID sets the activity edge to Activity by id.
func (cc *ClubCreate) SetActivityID(id int) *ClubCreate {
	cc.mutation.SetActivityID(id)
	return cc
}

// SetNillableActivityID sets the activity edge to Activity by id if the given value is not nil.
func (cc *ClubCreate) SetNillableActivityID(id *int) *ClubCreate {
	if id != nil {
		cc = cc.SetActivityID(*id)
	}
	return cc
}

// SetActivity sets the activity edge to Activity.
func (cc *ClubCreate) SetActivity(a *Activity) *ClubCreate {
	return cc.SetActivityID(a.ID)
}

// Mutation returns the ClubMutation object of the builder.
func (cc *ClubCreate) Mutation() *ClubMutation {
	return cc.mutation
}

// Save creates the Club in the database.
func (cc *ClubCreate) Save(ctx context.Context) (*Club, error) {
	if _, ok := cc.mutation.CLUBNAME(); !ok {
		return nil, &ValidationError{Name: "CLUB_NAME", err: errors.New("ent: missing required field \"CLUB_NAME\"")}
	}
	if v, ok := cc.mutation.CLUBNAME(); ok {
		if err := club.CLUBNAMEValidator(v); err != nil {
			return nil, &ValidationError{Name: "CLUB_NAME", err: fmt.Errorf("ent: validator failed for field \"CLUB_NAME\": %w", err)}
		}
	}
	var (
		err  error
		node *Club
	)
	if len(cc.hooks) == 0 {
		node, err = cc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ClubMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cc.mutation = mutation
			node, err = cc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cc.hooks) - 1; i >= 0; i-- {
			mut = cc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (cc *ClubCreate) SaveX(ctx context.Context) *Club {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (cc *ClubCreate) sqlSave(ctx context.Context) (*Club, error) {
	c, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	c.ID = int(id)
	return c, nil
}

func (cc *ClubCreate) createSpec() (*Club, *sqlgraph.CreateSpec) {
	var (
		c     = &Club{config: cc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: club.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: club.FieldID,
			},
		}
	)
	if value, ok := cc.mutation.CLUBNAME(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: club.FieldCLUBNAME,
		})
		c.CLUBNAME = value
	}
	if nodes := cc.mutation.LocationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   club.LocationTable,
			Columns: []string{club.LocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: location.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.ClubtypesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   club.ClubtypesTable,
			Columns: []string{club.ClubtypesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: clubtypes.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   club.UserTable,
			Columns: []string{club.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.ActivityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   club.ActivityTable,
			Columns: []string{club.ActivityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: activity.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return c, _spec
}
