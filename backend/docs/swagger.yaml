basePath: /api/v1
definitions:
  ent.Activity:
    properties:
      CLUBE_ACTIVITY_NAME:
        description: CLUBEACTIVITYNAME holds the value of the "CLUBE_ACTIVITY_NAME" field.
        type: string
      edges:
        $ref: '#/definitions/ent.ActivityEdges'
        description: |-
          Edges holds the relations/edges for other nodes in the graph.
          The values are being populated by the ActivityQuery when eager-loading is set.
        type: object
      id:
        description: ID of the ent.
        type: integer
    type: object
  ent.ActivityEdges:
    properties:
      club:
        description: Club holds the value of the club edge.
        items:
          $ref: '#/definitions/ent.Club'
        type: array
    type: object
  ent.Club:
    properties:
      CLUB_NAME:
        description: CLUBNAME holds the value of the "CLUB_NAME" field.
        type: string
      edges:
        $ref: '#/definitions/ent.ClubEdges'
        description: |-
          Edges holds the relations/edges for other nodes in the graph.
          The values are being populated by the ClubQuery when eager-loading is set.
        type: object
      id:
        description: ID of the ent.
        type: integer
    type: object
  ent.ClubEdges:
    properties:
      activity:
        $ref: '#/definitions/ent.Activity'
        description: Activity holds the value of the activity edge.
        type: object
      clubtypes:
        $ref: '#/definitions/ent.ClubTypes'
        description: Clubtypes holds the value of the clubtypes edge.
        type: object
      location:
        $ref: '#/definitions/ent.Location'
        description: Location holds the value of the location edge.
        type: object
      user:
        $ref: '#/definitions/ent.User'
        description: User holds the value of the user edge.
        type: object
    type: object
  ent.ClubTypes:
    properties:
      CLUBE_TYPE_NAME:
        description: CLUBETYPENAME holds the value of the "CLUBE_TYPE_NAME" field.
        type: string
      edges:
        $ref: '#/definitions/ent.ClubTypesEdges'
        description: |-
          Edges holds the relations/edges for other nodes in the graph.
          The values are being populated by the ClubTypesQuery when eager-loading is set.
        type: object
      id:
        description: ID of the ent.
        type: integer
    type: object
  ent.ClubTypesEdges:
    properties:
      club:
        description: Club holds the value of the club edge.
        items:
          $ref: '#/definitions/ent.Club'
        type: array
    type: object
  ent.Location:
    properties:
      CLUBE_LOCATION_ADDRESS:
        description: CLUBELOCATIONADDRESS holds the value of the "CLUBE_LOCATION_ADDRESS" field.
        type: string
      CLUBE_LOCATION_NAME:
        description: CLUBELOCATIONNAME holds the value of the "CLUBE_LOCATION_NAME" field.
        type: string
      edges:
        $ref: '#/definitions/ent.LocationEdges'
        description: |-
          Edges holds the relations/edges for other nodes in the graph.
          The values are being populated by the LocationQuery when eager-loading is set.
        type: object
      id:
        description: ID of the ent.
        type: integer
    type: object
  ent.LocationEdges:
    properties:
      club:
        description: Club holds the value of the club edge.
        items:
          $ref: '#/definitions/ent.Club'
        type: array
    type: object
  ent.User:
    properties:
      USER_EMAIL:
        description: USEREMAIL holds the value of the "USER_EMAIL" field.
        type: string
      USER_NAME:
        description: USERNAME holds the value of the "USER_NAME" field.
        type: string
      edges:
        $ref: '#/definitions/ent.UserEdges'
        description: |-
          Edges holds the relations/edges for other nodes in the graph.
          The values are being populated by the UserQuery when eager-loading is set.
        type: object
      id:
        description: ID of the ent.
        type: integer
    type: object
  ent.UserEdges:
    properties:
      club:
        description: Club holds the value of the club edge.
        items:
          $ref: '#/definitions/ent.Club'
        type: array
    type: object
  gin.H:
    additionalProperties: true
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a sample server for SUT SE 2563
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: SUT SA Example API
  version: "1.0"
paths:
  /Activitys:
    get:
      description: list Activity entities
      operationId: list-Activity
      parameters:
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ent.Activity'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: List Activity entities
    post:
      consumes:
      - application/json
      description: Create Activity
      operationId: create-Activity
      parameters:
      - description: Activity entity
        in: body
        name: Activity
        required: true
        schema:
          $ref: '#/definitions/ent.Activity'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Activity'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Create Activity
  /Activitys/{id}:
    delete:
      description: get Activity by ID
      operationId: delete-Activity
      parameters:
      - description: Activity ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/gin.H'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Delete a Activity entity by ID
    get:
      description: get Activity by ID
      operationId: get-Activity
      parameters:
      - description: Activity ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Activity'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Get a Activity entity by ID
    put:
      consumes:
      - application/json
      description: update Activity by ID
      operationId: update-Activity
      parameters:
      - description: Activity ID
        in: path
        name: id
        required: true
        type: integer
      - description: Activity entity
        in: body
        name: Activity
        required: true
        schema:
          $ref: '#/definitions/ent.Activity'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Activity'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Update a Activity entity by ID
  /ClubTypess:
    get:
      description: list ClubTypes entities
      operationId: list-ClubTypes
      parameters:
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ent.ClubTypes'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: List ClubTypes entities
    post:
      consumes:
      - application/json
      description: Create ClubTypes
      operationId: create-ClubTypes
      parameters:
      - description: ClubTypes entity
        in: body
        name: ClubTypes
        required: true
        schema:
          $ref: '#/definitions/ent.ClubTypes'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.ClubTypes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Create ClubTypes
  /ClubTypess/{id}:
    delete:
      description: get ClubTypes by ID
      operationId: delete-ClubTypes
      parameters:
      - description: ClubTypes ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/gin.H'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Delete a ClubTypes entity by ID
    get:
      description: get ClubTypes by ID
      operationId: get-ClubTypes
      parameters:
      - description: ClubTypes ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.ClubTypes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Get a ClubTypes entity by ID
    put:
      consumes:
      - application/json
      description: update ClubTypes by ID
      operationId: update-ClubTypes
      parameters:
      - description: ClubTypes ID
        in: path
        name: id
        required: true
        type: integer
      - description: ClubTypes entity
        in: body
        name: ClubTypes
        required: true
        schema:
          $ref: '#/definitions/ent.ClubTypes'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.ClubTypes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Update a ClubTypes entity by ID
  /Clubs:
    get:
      description: list Club entities
      operationId: list-Club
      parameters:
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ent.Club'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: List Club entities
    post:
      consumes:
      - application/json
      description: Create Club
      operationId: create-Club
      parameters:
      - description: Club entity
        in: body
        name: club
        required: true
        schema:
          $ref: '#/definitions/ent.Club'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Club'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Create Club
  /Clubs/{id}:
    delete:
      description: get Club by ID
      operationId: delete-Club
      parameters:
      - description: Club ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/gin.H'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Delete a Club entity by ID
    get:
      description: get Club by ID
      operationId: get-Club
      parameters:
      - description: Club ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Club'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Get a Club entity by ID
    put:
      consumes:
      - application/json
      description: update Club by ID
      operationId: update-Club
      parameters:
      - description: Club ID
        in: path
        name: id
        required: true
        type: integer
      - description: Club entity
        in: body
        name: Club
        required: true
        schema:
          $ref: '#/definitions/ent.Club'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Club'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Update a Club entity by ID
  /Locations:
    get:
      description: list Location entities
      operationId: list-Location
      parameters:
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ent.Location'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: List Location entities
    post:
      consumes:
      - application/json
      description: Create Location
      operationId: create-Location
      parameters:
      - description: Location entity
        in: body
        name: Location
        required: true
        schema:
          $ref: '#/definitions/ent.Location'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Location'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Create Location
  /Locations/{id}:
    delete:
      description: get Location by ID
      operationId: delete-Location
      parameters:
      - description: Location ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/gin.H'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Delete a Location entity by ID
    get:
      description: get Location by ID
      operationId: get-Location
      parameters:
      - description: Location ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Location'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Get a Location entity by ID
    put:
      consumes:
      - application/json
      description: update Location by ID
      operationId: update-Location
      parameters:
      - description: Location ID
        in: path
        name: id
        required: true
        type: integer
      - description: Location entity
        in: body
        name: Location
        required: true
        schema:
          $ref: '#/definitions/ent.Location'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Location'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Update a Location entity by ID
  /users:
    get:
      description: list user entities
      operationId: list-user
      parameters:
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ent.User'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: List user entities
    post:
      consumes:
      - application/json
      description: Create user
      operationId: create-user
      parameters:
      - description: User entity
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/ent.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Create user
  /users/{id}:
    delete:
      description: get user by ID
      operationId: delete-user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/gin.H'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Delete a user entity by ID
    get:
      description: get user by ID
      operationId: get-user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Get a user entity by ID
    put:
      consumes:
      - application/json
      description: update user by ID
      operationId: update-user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: User entity
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/ent.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Update a user entity by ID
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
  BasicAuth:
    type: basic
  OAuth2AccessCode:
    authorizationUrl: https://example.com/oauth/authorize
    flow: accessCode
    scopes:
      admin: ' Grants read and write access to administrative information'
    tokenUrl: https://example.com/oauth/token
    type: oauth2
  OAuth2Application:
    flow: application
    scopes:
      admin: ' Grants read and write access to administrative information'
      write: ' Grants write access'
    tokenUrl: https://example.com/oauth/token
    type: oauth2
  OAuth2Implicit:
    authorizationUrl: https://example.com/oauth/authorize
    flow: implicit
    scopes:
      admin: ' Grants read and write access to administrative information'
      write: ' Grants write access'
    type: oauth2
  OAuth2Password:
    flow: password
    scopes:
      admin: ' Grants read and write access to administrative information'
      read: ' Grants read access'
      write: ' Grants write access'
    tokenUrl: https://example.com/oauth/token
    type: oauth2
swagger: "2.0"
