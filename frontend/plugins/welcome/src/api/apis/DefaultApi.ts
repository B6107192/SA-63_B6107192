/* tslint:disable */
/* eslint-disable */
/**
 * SUT SA Example API
 * This is a sample server for SUT SE 2563
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    EntActivity,
    EntActivityFromJSON,
    EntActivityToJSON,
    EntClub,
    EntClubFromJSON,
    EntClubToJSON,
    EntClubTypes,
    EntClubTypesFromJSON,
    EntClubTypesToJSON,
    EntLocation,
    EntLocationFromJSON,
    EntLocationToJSON,
    EntUser,
    EntUserFromJSON,
    EntUserToJSON,
} from '../models';

export interface CreateActivityRequest {
    activity: EntActivity;
}

export interface CreateClubRequest {
    club: EntClub;
}

export interface CreateClubTypesRequest {
    clubTypes: EntClubTypes;
}

export interface CreateLocationRequest {
    location: EntLocation;
}

export interface CreateUserRequest {
    user: EntUser;
}

export interface DeleteActivityRequest {
    id: number;
}

export interface DeleteClubRequest {
    id: number;
}

export interface DeleteClubTypesRequest {
    id: number;
}

export interface DeleteLocationRequest {
    id: number;
}

export interface DeleteUserRequest {
    id: number;
}

export interface GetActivityRequest {
    id: number;
}

export interface GetClubRequest {
    id: number;
}

export interface GetClubTypesRequest {
    id: number;
}

export interface GetLocationRequest {
    id: number;
}

export interface GetUserRequest {
    id: number;
}

export interface ListActivityRequest {
    limit?: number;
    offset?: number;
}

export interface ListClubRequest {
    limit?: number;
    offset?: number;
}

export interface ListClubTypesRequest {
    limit?: number;
    offset?: number;
}

export interface ListLocationRequest {
    limit?: number;
    offset?: number;
}

export interface ListUserRequest {
    limit?: number;
    offset?: number;
}

export interface UpdateActivityRequest {
    id: number;
    activity: EntActivity;
}

export interface UpdateClubRequest {
    id: number;
    club: EntClub;
}

export interface UpdateClubTypesRequest {
    id: number;
    clubTypes: EntClubTypes;
}

export interface UpdateLocationRequest {
    id: number;
    location: EntLocation;
}

export interface UpdateUserRequest {
    id: number;
    user: EntUser;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Create Activity
     * Create Activity
     */
    async createActivityRaw(requestParameters: CreateActivityRequest): Promise<runtime.ApiResponse<EntActivity>> {
        if (requestParameters.activity === null || requestParameters.activity === undefined) {
            throw new runtime.RequiredError('activity','Required parameter requestParameters.activity was null or undefined when calling createActivity.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/Activitys`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntActivityToJSON(requestParameters.activity),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntActivityFromJSON(jsonValue));
    }

    /**
     * Create Activity
     * Create Activity
     */
    async createActivity(requestParameters: CreateActivityRequest): Promise<EntActivity> {
        const response = await this.createActivityRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create Club
     * Create Club
     */
    async createClubRaw(requestParameters: CreateClubRequest): Promise<runtime.ApiResponse<EntClub>> {
        if (requestParameters.club === null || requestParameters.club === undefined) {
            throw new runtime.RequiredError('club','Required parameter requestParameters.club was null or undefined when calling createClub.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/Clubs`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntClubToJSON(requestParameters.club),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntClubFromJSON(jsonValue));
    }

    /**
     * Create Club
     * Create Club
     */
    async createClub(requestParameters: CreateClubRequest): Promise<EntClub> {
        const response = await this.createClubRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create ClubTypes
     * Create ClubTypes
     */
    async createClubTypesRaw(requestParameters: CreateClubTypesRequest): Promise<runtime.ApiResponse<EntClubTypes>> {
        if (requestParameters.clubTypes === null || requestParameters.clubTypes === undefined) {
            throw new runtime.RequiredError('clubTypes','Required parameter requestParameters.clubTypes was null or undefined when calling createClubTypes.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/ClubTypess`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntClubTypesToJSON(requestParameters.clubTypes),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntClubTypesFromJSON(jsonValue));
    }

    /**
     * Create ClubTypes
     * Create ClubTypes
     */
    async createClubTypes(requestParameters: CreateClubTypesRequest): Promise<EntClubTypes> {
        const response = await this.createClubTypesRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create Location
     * Create Location
     */
    async createLocationRaw(requestParameters: CreateLocationRequest): Promise<runtime.ApiResponse<EntLocation>> {
        if (requestParameters.location === null || requestParameters.location === undefined) {
            throw new runtime.RequiredError('location','Required parameter requestParameters.location was null or undefined when calling createLocation.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/Locations`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntLocationToJSON(requestParameters.location),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntLocationFromJSON(jsonValue));
    }

    /**
     * Create Location
     * Create Location
     */
    async createLocation(requestParameters: CreateLocationRequest): Promise<EntLocation> {
        const response = await this.createLocationRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create user
     * Create user
     */
    async createUserRaw(requestParameters: CreateUserRequest): Promise<runtime.ApiResponse<EntUser>> {
        if (requestParameters.user === null || requestParameters.user === undefined) {
            throw new runtime.RequiredError('user','Required parameter requestParameters.user was null or undefined when calling createUser.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/users`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntUserToJSON(requestParameters.user),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntUserFromJSON(jsonValue));
    }

    /**
     * Create user
     * Create user
     */
    async createUser(requestParameters: CreateUserRequest): Promise<EntUser> {
        const response = await this.createUserRaw(requestParameters);
        return await response.value();
    }

    /**
     * get Activity by ID
     * Delete a Activity entity by ID
     */
    async deleteActivityRaw(requestParameters: DeleteActivityRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteActivity.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Activitys/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get Activity by ID
     * Delete a Activity entity by ID
     */
    async deleteActivity(requestParameters: DeleteActivityRequest): Promise<object> {
        const response = await this.deleteActivityRaw(requestParameters);
        return await response.value();
    }

    /**
     * get Club by ID
     * Delete a Club entity by ID
     */
    async deleteClubRaw(requestParameters: DeleteClubRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteClub.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Clubs/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get Club by ID
     * Delete a Club entity by ID
     */
    async deleteClub(requestParameters: DeleteClubRequest): Promise<object> {
        const response = await this.deleteClubRaw(requestParameters);
        return await response.value();
    }

    /**
     * get ClubTypes by ID
     * Delete a ClubTypes entity by ID
     */
    async deleteClubTypesRaw(requestParameters: DeleteClubTypesRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteClubTypes.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/ClubTypess/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get ClubTypes by ID
     * Delete a ClubTypes entity by ID
     */
    async deleteClubTypes(requestParameters: DeleteClubTypesRequest): Promise<object> {
        const response = await this.deleteClubTypesRaw(requestParameters);
        return await response.value();
    }

    /**
     * get Location by ID
     * Delete a Location entity by ID
     */
    async deleteLocationRaw(requestParameters: DeleteLocationRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteLocation.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Locations/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get Location by ID
     * Delete a Location entity by ID
     */
    async deleteLocation(requestParameters: DeleteLocationRequest): Promise<object> {
        const response = await this.deleteLocationRaw(requestParameters);
        return await response.value();
    }

    /**
     * get user by ID
     * Delete a user entity by ID
     */
    async deleteUserRaw(requestParameters: DeleteUserRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteUser.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get user by ID
     * Delete a user entity by ID
     */
    async deleteUser(requestParameters: DeleteUserRequest): Promise<object> {
        const response = await this.deleteUserRaw(requestParameters);
        return await response.value();
    }

    /**
     * get Activity by ID
     * Get a Activity entity by ID
     */
    async getActivityRaw(requestParameters: GetActivityRequest): Promise<runtime.ApiResponse<EntActivity>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getActivity.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Activitys/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntActivityFromJSON(jsonValue));
    }

    /**
     * get Activity by ID
     * Get a Activity entity by ID
     */
    async getActivity(requestParameters: GetActivityRequest): Promise<EntActivity> {
        const response = await this.getActivityRaw(requestParameters);
        return await response.value();
    }

    /**
     * get Club by ID
     * Get a Club entity by ID
     */
    async getClubRaw(requestParameters: GetClubRequest): Promise<runtime.ApiResponse<EntClub>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getClub.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Clubs/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntClubFromJSON(jsonValue));
    }

    /**
     * get Club by ID
     * Get a Club entity by ID
     */
    async getClub(requestParameters: GetClubRequest): Promise<EntClub> {
        const response = await this.getClubRaw(requestParameters);
        return await response.value();
    }

    /**
     * get ClubTypes by ID
     * Get a ClubTypes entity by ID
     */
    async getClubTypesRaw(requestParameters: GetClubTypesRequest): Promise<runtime.ApiResponse<EntClubTypes>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getClubTypes.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/ClubTypess/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntClubTypesFromJSON(jsonValue));
    }

    /**
     * get ClubTypes by ID
     * Get a ClubTypes entity by ID
     */
    async getClubTypes(requestParameters: GetClubTypesRequest): Promise<EntClubTypes> {
        const response = await this.getClubTypesRaw(requestParameters);
        return await response.value();
    }

    /**
     * get Location by ID
     * Get a Location entity by ID
     */
    async getLocationRaw(requestParameters: GetLocationRequest): Promise<runtime.ApiResponse<EntLocation>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getLocation.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Locations/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntLocationFromJSON(jsonValue));
    }

    /**
     * get Location by ID
     * Get a Location entity by ID
     */
    async getLocation(requestParameters: GetLocationRequest): Promise<EntLocation> {
        const response = await this.getLocationRaw(requestParameters);
        return await response.value();
    }

    /**
     * get user by ID
     * Get a user entity by ID
     */
    async getUserRaw(requestParameters: GetUserRequest): Promise<runtime.ApiResponse<EntUser>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getUser.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntUserFromJSON(jsonValue));
    }

    /**
     * get user by ID
     * Get a user entity by ID
     */
    async getUser(requestParameters: GetUserRequest): Promise<EntUser> {
        const response = await this.getUserRaw(requestParameters);
        return await response.value();
    }

    /**
     * list Activity entities
     * List Activity entities
     */
    async listActivityRaw(requestParameters: ListActivityRequest): Promise<runtime.ApiResponse<Array<EntActivity>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Activitys`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntActivityFromJSON));
    }

    /**
     * list Activity entities
     * List Activity entities
     */
    async listActivity(requestParameters: ListActivityRequest): Promise<Array<EntActivity>> {
        const response = await this.listActivityRaw(requestParameters);
        return await response.value();
    }

    /**
     * list Club entities
     * List Club entities
     */
    async listClubRaw(requestParameters: ListClubRequest): Promise<runtime.ApiResponse<Array<EntClub>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Clubs`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntClubFromJSON));
    }

    /**
     * list Club entities
     * List Club entities
     */
    async listClub(requestParameters: ListClubRequest): Promise<Array<EntClub>> {
        const response = await this.listClubRaw(requestParameters);
        return await response.value();
    }

    /**
     * list ClubTypes entities
     * List ClubTypes entities
     */
    async listClubTypesRaw(requestParameters: ListClubTypesRequest): Promise<runtime.ApiResponse<Array<EntClubTypes>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/ClubTypess`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntClubTypesFromJSON));
    }

    /**
     * list ClubTypes entities
     * List ClubTypes entities
     */
    async listClubTypes(requestParameters: ListClubTypesRequest): Promise<Array<EntClubTypes>> {
        const response = await this.listClubTypesRaw(requestParameters);
        return await response.value();
    }

    /**
     * list Location entities
     * List Location entities
     */
    async listLocationRaw(requestParameters: ListLocationRequest): Promise<runtime.ApiResponse<Array<EntLocation>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Locations`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntLocationFromJSON));
    }

    /**
     * list Location entities
     * List Location entities
     */
    async listLocation(requestParameters: ListLocationRequest): Promise<Array<EntLocation>> {
        const response = await this.listLocationRaw(requestParameters);
        return await response.value();
    }

    /**
     * list user entities
     * List user entities
     */
    async listUserRaw(requestParameters: ListUserRequest): Promise<runtime.ApiResponse<Array<EntUser>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntUserFromJSON));
    }

    /**
     * list user entities
     * List user entities
     */
    async listUser(requestParameters: ListUserRequest): Promise<Array<EntUser>> {
        const response = await this.listUserRaw(requestParameters);
        return await response.value();
    }

    /**
     * update Activity by ID
     * Update a Activity entity by ID
     */
    async updateActivityRaw(requestParameters: UpdateActivityRequest): Promise<runtime.ApiResponse<EntActivity>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateActivity.');
        }

        if (requestParameters.activity === null || requestParameters.activity === undefined) {
            throw new runtime.RequiredError('activity','Required parameter requestParameters.activity was null or undefined when calling updateActivity.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/Activitys/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntActivityToJSON(requestParameters.activity),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntActivityFromJSON(jsonValue));
    }

    /**
     * update Activity by ID
     * Update a Activity entity by ID
     */
    async updateActivity(requestParameters: UpdateActivityRequest): Promise<EntActivity> {
        const response = await this.updateActivityRaw(requestParameters);
        return await response.value();
    }

    /**
     * update Club by ID
     * Update a Club entity by ID
     */
    async updateClubRaw(requestParameters: UpdateClubRequest): Promise<runtime.ApiResponse<EntClub>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateClub.');
        }

        if (requestParameters.club === null || requestParameters.club === undefined) {
            throw new runtime.RequiredError('club','Required parameter requestParameters.club was null or undefined when calling updateClub.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/Clubs/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntClubToJSON(requestParameters.club),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntClubFromJSON(jsonValue));
    }

    /**
     * update Club by ID
     * Update a Club entity by ID
     */
    async updateClub(requestParameters: UpdateClubRequest): Promise<EntClub> {
        const response = await this.updateClubRaw(requestParameters);
        return await response.value();
    }

    /**
     * update ClubTypes by ID
     * Update a ClubTypes entity by ID
     */
    async updateClubTypesRaw(requestParameters: UpdateClubTypesRequest): Promise<runtime.ApiResponse<EntClubTypes>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateClubTypes.');
        }

        if (requestParameters.clubTypes === null || requestParameters.clubTypes === undefined) {
            throw new runtime.RequiredError('clubTypes','Required parameter requestParameters.clubTypes was null or undefined when calling updateClubTypes.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/ClubTypess/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntClubTypesToJSON(requestParameters.clubTypes),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntClubTypesFromJSON(jsonValue));
    }

    /**
     * update ClubTypes by ID
     * Update a ClubTypes entity by ID
     */
    async updateClubTypes(requestParameters: UpdateClubTypesRequest): Promise<EntClubTypes> {
        const response = await this.updateClubTypesRaw(requestParameters);
        return await response.value();
    }

    /**
     * update Location by ID
     * Update a Location entity by ID
     */
    async updateLocationRaw(requestParameters: UpdateLocationRequest): Promise<runtime.ApiResponse<EntLocation>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateLocation.');
        }

        if (requestParameters.location === null || requestParameters.location === undefined) {
            throw new runtime.RequiredError('location','Required parameter requestParameters.location was null or undefined when calling updateLocation.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/Locations/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntLocationToJSON(requestParameters.location),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntLocationFromJSON(jsonValue));
    }

    /**
     * update Location by ID
     * Update a Location entity by ID
     */
    async updateLocation(requestParameters: UpdateLocationRequest): Promise<EntLocation> {
        const response = await this.updateLocationRaw(requestParameters);
        return await response.value();
    }

    /**
     * update user by ID
     * Update a user entity by ID
     */
    async updateUserRaw(requestParameters: UpdateUserRequest): Promise<runtime.ApiResponse<EntUser>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateUser.');
        }

        if (requestParameters.user === null || requestParameters.user === undefined) {
            throw new runtime.RequiredError('user','Required parameter requestParameters.user was null or undefined when calling updateUser.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntUserToJSON(requestParameters.user),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntUserFromJSON(jsonValue));
    }

    /**
     * update user by ID
     * Update a user entity by ID
     */
    async updateUser(requestParameters: UpdateUserRequest): Promise<EntUser> {
        const response = await this.updateUserRaw(requestParameters);
        return await response.value();
    }

}
